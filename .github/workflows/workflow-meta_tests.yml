---
name: cicd-tooling-github-workflow-meta_tests

on:
  push:
  workflow_dispatch:

#  secrets:
#    SLACK_WEBHOOK:
#      description: "Optional, enables Slack notifications."
#      required: false

env:
  EXPECTED_MOLECULE_SCENARIOS: '[]'

jobs:

  configuration:
    uses: ./.github/workflows/job-00-cookiecutter-configuration.yml

  scenarios:
    needs: [configuration]
    uses: ./.github/workflows/job-00-generic-molecule_scenarios.yml
    with:
      MOLECULE_EXCLUSION_REGEX: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_MOLECULE_EXCLUDED_SCENARIOS_REGEX }}
      MOLECULE_SCENARIO_PATH: "{{cookiecutter.project_slug}}/ansible_role/molecule"

  scenarios_data_test:
    needs: [scenarios]
    runs-on: ubuntu-latest

    steps:
      - name: Molecule Scenario Discovery Test -- Checkout Repository
        uses: actions/checkout@v3

      - name: Molecule Scenario Discovery Test -- Setup Environment
        env:
          WORKFLOW_NAME: "test"
        run: |
          "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Molecule Scenario Discovery Test -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Molecule Scenario Discovery Test -- Run Success Notification Action (Testing Locally)
        if: needs.scenarios.outputs.SCENARIOS == env.EXPECTED_MOLECULE_SCENARIOS
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":heavy_check_mark:"
          NOTIFICATION_MESSAGE: "Molecule Scenario detection is working (received: ${{ toJSON(needs.scenarios.outputs.SCENARIOS) }})!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Molecule Scenario Discovery Test -- Run Failure Notification Action (Testing Locally)
        if: needs.scenarios.outputs.SCENARIOS != env.EXPECTED_MOLECULE_SCENARIOS
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          FORCE_HALT_WORKFLOW: true
          NOTIFICATION_EMOJI: ":x:"
          NOTIFICATION_MESSAGE: "Molecule Scenario detection is NOT working (received: ${{ toJSON(needs.scenarios.outputs.SCENARIOS) }}) !"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  secret_exists:
    secrets:
      SECRET: ${{ secrets.SLACK_WEBHOOK }}
    uses: ./.github/workflows/job-00-generic-secret_exists.yml

  secret_does_not_exist:
    secrets:
      SECRET: ${{ secrets.NON_EXISTING_SECRET }}
    uses: ./.github/workflows/job-00-generic-secret_exists.yml

  secrets_data_test:
    needs: [secret_exists, secret_does_not_exist]
    runs-on: ubuntu-latest

    steps:
      - name: Secret Exists Test -- Checkout Repository
        uses: actions/checkout@v3

      - name: Secret Exists Test -- Setup Environment
        env:
          WORKFLOW_NAME: "test"
        run: |
          "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Secret Exists Test -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Secret Exists Test -- Run Success Notification Action (Testing Locally)
        if: needs.secret_exists.outputs.EXISTS == 'true' && needs.secret_does_not_exist.outputs.EXISTS == 'false'
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":heavy_check_mark:"
          NOTIFICATION_MESSAGE: "Secret definition validation is working (received: ${{ needs.secret_exists.outputs.EXISTS }} / ${{ needs.secret_does_not_exist.outputs.EXISTS }})!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Secret Exists Test -- Run Failure Notification Action (Testing Locally)
        if: needs.secret_exists.outputs.EXISTS != 'true' || needs.secret_does_not_exist.outputs.EXISTS != 'false'
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          FORCE_HALT_WORKFLOW: true
          NOTIFICATION_EMOJI: ":x:"
          NOTIFICATION_MESSAGE: "Secret definition validation is NOT working (received: ${{ needs.secret_exists.outputs.EXISTS }} / ${{ needs.secret_does_not_exist.outputs.EXISTS }})!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  send_notification_test_success:
    runs-on: ubuntu-latest
    steps:
      - name: Notification (Local Action Test) -- Checkout Repository
        uses: actions/checkout@v3

      - name: Notification (Local Action Test) -- Setup Environment
        env:
          WORKFLOW_NAME: "test"
        run: |
          "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Notification (Local Action Test) -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Notification (Local Action Test) -- Run Notification Action (Testing Locally)
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":vertical_traffic_light:"
          NOTIFICATION_MESSAGE: "testing workflow has started!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  send_notification_test_failure:
    runs-on: ubuntu-latest
    steps:
      - name: Notification (Local Action Test) -- Checkout Repository
        uses: actions/checkout@v3

      - name: Notification (Local Action Test) -- Setup Environment
        env:
          WORKFLOW_NAME: "test"
        run: |
          "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Notification (Local Action Test) -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Notification (Local Action Test) -- Run Notification Action (Testing Locally)
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":heavy_check_mark:"
          NOTIFICATION_MESSAGE: "local notification script is working!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          TESTING_MODE: true

  security_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: ./.github/workflows/job-10-generic-security.yml
    with:
      TESTING_MODE: true
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}
      WORKFLOW_NAME: "test"

  markdown_links_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: ./.github/workflows/job-30-cookiecutter-documentation.yml
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      CONFIG_FILE: "{{cookiecutter.project_slug}}/.github/config/actions/gaurav-nelson-github-action-markdown-link-check.json"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TESTING_MODE: true
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}
      WORKFLOW_NAME: "test"

  pre-commit_hooks_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: ./.github/workflows/job-50-cookiecutter-precommit_hooks.yml
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      ENABLED_PRECOMMIT_CHECKS: '["test_commit_lint_fails", "test_toml_lint_fails", "test_toml_lint_passes", "test_shell_lint_fails", "test_shell_format_fails", "test_workflow_lint_fails", "test_workflow_header_lint_fails"]'
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TEMPLATE_SCENARIOS: '["0.toml_linting-0.workflow_linting"]'
      TESTING_MODE: true
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}
      WORKFLOW_NAME: "test"

  commitizen_hooks_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: ./.github/workflows/job-50-poetry-commitizen_hooks.yml
    with:
      COMMITIZEN_BUMP_TYPE: "MINOR"
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      EXPECTED_BUMPED_VERSION: "0.2.0"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TESTING_MODE: true
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}
      WORKFLOW_NAME: "test"

  commit_lint_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: ./.github/workflows/job-80-poetry-commit_lint.yml
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TESTING_MODE: true
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}
      WORKFLOW_NAME: "test"

  shell_lint_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    strategy:
      fail-fast: true
      matrix:
        hook:
          - id: "shell-fmt"
            name: "Shell Formatting"
          - id: "shell-lint"
            name: "Shell Linting"
      max-parallel: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
    uses: ./.github/workflows/job-80-cookiecutter-precommit_linter.yml
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: ${{ matrix.hook.id }}
      PRECOMMIT_HOOK_NAME: ${{ matrix.hook.name }}
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TESTING_MODE: true
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}
      WORKFLOW_NAME: "test"

  toml_lint_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: ./.github/workflows/job-80-cookiecutter-precommit_linter.yml
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: "toml-lint"
      PRECOMMIT_HOOK_NAME: "TOML Linting"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TESTING_MODE: true
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}
      WORKFLOW_NAME: "test"

  workflow_lint_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    strategy:
      fail-fast: true
      matrix:
        hook:
          - id: "workflow-lint"
            name: "Workflow Linting"
          - id: "workflow-header-lint"
            name: "Workflow Header Linting"
      max-parallel: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
    uses: ./.github/workflows/job-80-cookiecutter-precommit_linter.yml
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: ${{ matrix.hook.id }}
      PRECOMMIT_HOOK_NAME: ${{ matrix.hook.name }}
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TESTING_MODE: true
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}
      WORKFLOW_NAME: "test"

  yaml_lint_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: ./.github/workflows/job-80-cookiecutter-precommit_linter.yml
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: "yamllint"
      PRECOMMIT_HOOK_NAME: "YAML Linting"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TEMPLATE_SCENARIOS: '["0.toml_linting-0.workflow_linting"]'
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}
      WORKFLOW_NAME: "test"

  create_release_test_failure:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: ./.github/workflows/job-99-poetry-create_release.yml
    with:
      TESTING_MODE: true
      WORKFLOW_NAME: "test"

  success:
    needs: [commit_lint_test_failure, commitizen_hooks_test_failure, create_release_test_failure, markdown_links_test_failure, pre-commit_hooks_test_failure, scenarios_data_test, secrets_data_test, security_test_failure, send_notification_test_failure, send_notification_test_success, shell_lint_test_failure, toml_lint_test_failure, workflow_lint_test_failure, yaml_lint_test_failure]
    runs-on: ubuntu-latest
    steps:
      - name: Notification (Local Action Test) -- Checkout Repository
        uses: actions/checkout@v3

      - name: Notification (Local Action Test) -- Setup Environment
        env:
          WORKFLOW_NAME: "test"
        run: |
          "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Notification (Local Action Test) -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Notification (Local Action Test) -- Run Notification Action (Testing Locally)
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":checkered_flag:"
          NOTIFICATION_MESSAGE: "all tests have passed successfully!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
