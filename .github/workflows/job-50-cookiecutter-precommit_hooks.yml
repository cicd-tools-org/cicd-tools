---
name: job-50-cookiecutter-precommit_hooks

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        description: "The maximum allowable parallel executions."
        required: true
        type: number
      ENABLED_PRECOMMIT_CHECKS:
        description: "A string encoded JSON array of precommit test scenarios that will be executed and tested."
        required: true
        type: string
      PYTHON_VERSIONS:
        description: "A string encoded JSON array of valid python versions."
        required: true
        type: string
      TEMPLATE_SCENARIOS:
        default: '["default"]'
        description: "Optional, a string encoded JSON array of 'cookiecutter.json' scenario files that will be used during rendering."
        required: false
        type: string
      TESTING_MODE:
        default: false
        description: "Optional, allows you to test a workflow failure."
        required: false
        type: boolean
      VERBOSE_NOTIFICATIONS:
        default: false
        description: "Optional, allows you to adjust the notification verbosity."
        required: false
        type: boolean
      WORKFLOW_NAME:
        default: ""
        description: "Identifies this workflow in notifications."
        required: false
        type: string
    secrets:
      SLACK_WEBHOOK:
        description: "Optional, enables Slack notifications."
        required: false

env:
  TEMPLATE_SKIP_POETRY: 0
  TEMPLATE_SKIP_PRECOMMIT: 0

jobs:

  precommit_hook_tests:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ${{ fromJSON(inputs.PYTHON_VERSIONS) }}
        scenario: ${{ fromJSON(inputs.TEMPLATE_SCENARIOS) }}
      max-parallel: ${{ inputs.CONCURRENCY }}

    steps:
      - name: Pre-Commit Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Pre-Commit Test -- Setup Environment
        env:
          WORKFLOW_NAME: ${{ inputs.WORKFLOW_NAME }}
        run: |
          "./template/.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Pre-Commit Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Pre-Commit Test -- Install Toolbox
        uses: ./template/.github/actions/action-00-toolbox
        with:
          PROJECT_ROOT_PATH: "template"

      - name: Pre-Commit Test -- (COOKIECUTTER) Render Template
        uses: ./template/.cicd-tools/boxes/active/ci/github/actions/action-05-cookiecutter-render
        with:
          PROJECT_ROOT_PATH: "template"
          SCENARIO: ${{ matrix.scenario }}

      - name: Pre-Commit Test -- (Rendered Template) Test Ansible Lint -- Expect Failure
        if: contains(fromJSON(inputs.ENABLED_PRECOMMIT_CHECKS), 'test_ansible_lint_fails')
        run: |
          "./template/.github/scripts/job-50-test-precommit.sh" "test_ansible_lint_fails"
        shell: bash

      - name: Pre-Commit Test -- (Rendered Template) Test Commit Lint -- Expect Failure
        if: contains(fromJSON(inputs.ENABLED_PRECOMMIT_CHECKS), 'test_commit_lint_fails')
        run: |
          "./template/.github/scripts/job-50-test-precommit.sh" "test_commit_lint_fails"
        shell: bash

      - name: Pre-Commit Test -- (Rendered Template) Test TOML Lint -- Expect Failure
        if: contains(matrix.scenario, '1.toml_linting') == true && contains(fromJSON(inputs.ENABLED_PRECOMMIT_CHECKS), 'test_toml_lint_fails')
        run: |
          "./template/.github/scripts/job-50-test-precommit.sh" "test_toml_lint_fails"
        shell: bash

      - name: Pre-Commit Test -- (Rendered Template) Test TOML Lint -- Expect Success
        if: contains(matrix.scenario, '1.toml_linting') == true && contains(fromJSON(inputs.ENABLED_PRECOMMIT_CHECKS), 'test_toml_lint_passes')
        run: |
          "./template/.github/scripts/job-50-test-precommit.sh" "test_toml_lint_passes"
        shell: bash

      - name: Pre-Commit Test -- (Rendered Template) Test Shell Lint -- Expect Failure
        if: contains(fromJSON(inputs.ENABLED_PRECOMMIT_CHECKS), 'test_shell_lint_fails')
        run: |
          "./template/.github/scripts/job-50-test-precommit.sh" "test_shell_lint_fails"
        shell: bash

      - name: Pre-Commit Test -- (Rendered Template) Test Shell Format -- Expect Failure
        if: contains(fromJSON(inputs.ENABLED_PRECOMMIT_CHECKS), 'test_shell_format_fails')
        run: |
          "./template/.github/scripts/job-50-test-precommit.sh" "test_shell_format_fails"
        shell: bash

      - name: Pre-Commit Test -- (Rendered Template) Test Workflow Lint -- Expect Failure
        if: contains(matrix.scenario, '1.workflow_linting') == true && contains(fromJSON(inputs.ENABLED_PRECOMMIT_CHECKS), 'test_workflow_lint_fails')
        run: |
          "./template/.github/scripts/job-50-test-precommit.sh" "test_workflow_lint_fails"
        shell: bash

      - name: Pre-Commit Test -- (Rendered Template) Test Workflow Headers Lint -- Expect Failure
        if: contains(matrix.scenario, '1.workflow_linting') == true && contains(fromJSON(inputs.ENABLED_PRECOMMIT_CHECKS), 'test_workflow_header_lint_fails')
        run: |
          "./template/.github/scripts/job-50-test-precommit.sh" "test_workflow_header_lint_fails"
        shell: bash

      - name: Pre-Commit Test -- Report Job Status on Success
        if: inputs.VERBOSE_NOTIFICATIONS == true
        uses: ./template/.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_MESSAGE: "pre-commit (${{ matrix.scenario }}) hook test has passed!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PROJECT_ROOT_PATH: "template"

      - name: Pre-Commit Test -- Report Job Status on Failure
        if: failure() || inputs.TESTING_MODE == true
        uses: ./template/.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":x:"
          NOTIFICATION_MESSAGE: "pre-commit (${{ matrix.scenario }}) hook test has failed!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PROJECT_ROOT_PATH: "template"
          TESTING_MODE: ${{ inputs.TESTING_MODE }}
