---
name: job-95-generic-build_artifact

# Consuming Projects Must Implement:
# - ./.github/scripts/step-setup-environment.sh

on:
  workflow_call:
    inputs:
      ARTIFACT_NAME:
        description: "The unique identifier for this build artifact."
        required: true
        type: string
      ARTIFACT_FOLDERS:
        description: "A newline delimited list of folders who's content will be packaged in the artifact."
        required: true
        type: string
      BUILD_COMMAND:
        description: "A shell command (or commands) to execute to create your build."
        required: true
        type: string
      DEPENDENT_ARTIFACT_NAME_PATTERN:
        default: ""
        description: "Optional, a glob pattern to identify artifacts that should be downloaded prior to build."
        required: false
        type: string
      ERROR_COMMAND:
        default: ""
        description: "Optional, a command to run if the workflow fails."
        required: false
        type: string
      POST_BUILD_COMMAND:
        default: ""
        description: "Optional, a command to run after the build executes."
        required: false
        type: string
      PRE_BUILD_COMMAND:
        default: ""
        description: "Optional, a command to run before the build executes."
        required: false
        type: string
      REMOTE_SCRIPT_USE_POETRY:
        default: "ci/generic/scripts/use-poetry.sh"
        description: "Optional, allows you to specify a use poetry script."
        required: false
        type: string
      REQUIRES_BUILDX:
        default: false
        description: "Optional, allows you to use docker buildx as part of your build."
        required: false
        type: boolean
      REQUIRES_POETRY:
        default: false
        description: "Optional, allows you to use poetry as part of your build."
        required: false
        type: boolean
      REQUIRES_PYTHON:
        default: "false"
        description: "Optional, allows you to use setup a python version as part of your build."
        required: false
        type: string
      REQUIRES_QEMU:
        default: false
        description: "Optional, allows you to use docker support for QEMU as part of your build."
        required: false
        type: boolean
      TESTING_MODE:
        default: false
        description: "Optional, allows you to test a workflow failure."
        required: false
        type: boolean
      WORKFLOW_NAME:
        default: ""
        description: "Identifies this workflow in notifications."
        required: false
        type: string
      VERBOSE_NOTIFICATIONS:
        default: false
        description: "Optional, allows you to enable verbose notifications."
        required: false
        type: boolean
    secrets:
      ENV_SECRET_1:
        description: "Optional, content to save to the environment."
        required: false
      ENV_SECRET_2:
        description: "Optional, content to save to the environment."
        required: false
      ENV_SECRET_3:
        description: "Optional, content to save to the environment."
        required: false
      SLACK_WEBHOOK:
        description: "Optional, enables Slack notifications."
        required: false

env:
  ENV_SECRET_1: ${{ secrets.ENV_SECRET_1 }}
  ENV_SECRET_2: ${{ secrets.ENV_SECRET_2 }}
  ENV_SECRET_3: ${{ secrets.ENV_SECRET_3 }}

jobs:

  build_artifacts:
    runs-on: ubuntu-latest

    steps:
      - name: Build and Upload Artifact -- Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build and Upload Artifact -- Set up Python ${{ inputs.REQUIRES_PYTHON }}
        if: inputs.REQUIRES_PYTHON != 'false'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.REQUIRES_PYTHON }}

      - name: Build and Upload Artifact -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Build and Upload Artifact -- Setup Environment
        env:
          WORKFLOW_NAME: ${{ inputs.WORKFLOW_NAME }}
        run: |
          bash "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Build and Upload Artifact -- Build Start Notification
        if: inputs.VERBOSE_NOTIFICATIONS == true
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":vertical_traffic_light:"
          NOTIFICATION_MESSAGE: "A build for '${{ inputs.ARTIFACT_NAME }}' has started ..."
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          TESTING_MODE: ${{ inputs.TESTING_MODE }}

      - name: Build and Upload Artifact -- Download Dependent Artifacts
        if: inputs.DEPENDENT_ARTIFACT_NAME_PATTERN != ''
        uses: actions/download-artifact@v4
        with:
          path: .
          pattern: ${{ inputs.DEPENDENT_ARTIFACT_NAME_PATTERN }}
          merge-multiple: true

      - name: Build and Upload Artifact -- Unpack Dependent Artifacts
        if: inputs.DEPENDENT_ARTIFACT_NAME_PATTERN != ''
        run: |
          for FILE in ./*.tar.gz; do tar xvzf "${FILE}"; done

      - name: Build and Upload Artifact -- Set up QEMU
        if: inputs.REQUIRES_QEMU == true
        uses: docker/setup-qemu-action@v3

      - name: https://github.com/docker/buildx/issues/314
        if: inputs.REQUIRES_QEMU == true
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes -c yes
        shell: bash

      - name: Build and Upload Artifact -- Set up Docker Buildx
        if: inputs.REQUIRES_BUILDX == true
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Build and Upload Artifact -- Setup Poetry
        if: inputs.REQUIRES_POETRY == true
        run: |
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_USE_POETRY }}" \
            "install-poetry"
        shell: bash

      - name: Build and Upload Artifact -- Pre Build Command
        if: inputs.PRE_BUILD_COMMAND != ''
        run: |
          ${{ inputs.PRE_BUILD_COMMAND }}
        shell: bash

      - name: Build and Upload Artifact -- Build Command
        run: |
          ${{ inputs.BUILD_COMMAND }}
        shell: bash

      - name: Build and Upload Artifact -- Post Build Command
        if: inputs.POST_BUILD_COMMAND != ''
        run: |
          ${{ inputs.POST_BUILD_COMMAND }}
        shell: bash

      - name: Build and Upload Artifact -- Package Artifact
        run: |
          IFS=$'\n' read -r -d '' -a FOLDERS <<< "${{ inputs.ARTIFACT_FOLDERS }}" || true
          eval "tar -czf '${{ inputs.ARTIFACT_NAME }}.tar.gz' $(printf "'%s' " "${FOLDERS[@]}")"
        shell: bash

      - name: Build and Upload Artifact -- Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.ARTIFACT_NAME }}
          path: "${{ inputs.ARTIFACT_NAME }}.tar.gz"

      - name: Build and Upload Artifact -- Report Job Status on Success
        if: inputs.VERBOSE_NOTIFICATIONS == true
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_MESSAGE: "Build artifact '${{ inputs.ARTIFACT_NAME }}' has been built and uploaded!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Build and Upload Artifact -- Report Job Status on Failure
        if: failure() || inputs.TESTING_MODE == true
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":x:"
          NOTIFICATION_MESSAGE: "An error occurred while building '${{ inputs.ARTIFACT_NAME }}'!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          TESTING_MODE: ${{ inputs.TESTING_MODE }}

      - name: Build and Upload Artifact -- Error Command
        if: failure() && inputs.ERROR_COMMAND != ''
        run: |
          ${{ inputs.ERROR_COMMAND }}
        shell: bash
