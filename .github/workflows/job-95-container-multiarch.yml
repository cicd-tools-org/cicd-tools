---
name: job-95-container-multiarch

# Consuming Projects Must Implement:
# - ./.github/scripts/step-setup-environment.sh

on:
  workflow_call:
    inputs:
      REGISTRY:
        default: "ghcr.io"
        description: "Optional, allows you to specify a Docker registry to use."
        required: false
        type: string
      IMAGE_GIT:
        default: false
        description: "Optional, allows you to create image tags from git branches and tags."
        required: false
        type: boolean
      IMAGE_NAME:
        default: ""
        description: "Optional, allows you to specify the image name, otherwise the configured script will generate one."
        required: false
        type: string
      IMAGE_LATEST:
        default: false
        description: "Optional, allows you to designate this as the 'latest' image when pushed."
        required: false
        type: boolean
      MULTIARCH_TAG:
        default: "multiarch"
        description: "Optional, allows you specify the multiarch tag that will be used to aggregate images from different platforms."
        required: false
        type: string
      SOURCE_TAGS:
        description: "The newline separated list of tags you wish to create the multiarch image from."
        required: true
        type: string
      REMOTE_SCRIPT_DEFAULT_SETTER:
        default: "ci/github/scripts/step-set-value-with-default.sh"
        description: "Optional, allows you to specify different default value creation script."
        required: false
        type: string
      REMOTE_SCRIPT_SET_VALUE:
        default: "ci/github/scripts/step-set-value.sh"
        description: "Optional, allows you to specify a workflow set value script."
        required: false
        type: string
      TESTING_MODE:
        default: false
        description: "Optional, allows you to test a workflow failure."
        required: false
        type: boolean
      VERBOSE_NOTIFICATIONS:
        default: false
        description: "Optional, allows you to adjust the notification verbosity."
        required: false
        type: boolean
      WORKFLOW_NAME:
        default: ""
        description: "Identifies this workflow in notifications."
        required: false
        type: string
    secrets:
      REGISTRY_USERNAME:
        description: "Optional, sets the username that will be used to login to the registry.  Default: github.actor"
        required: false
      REGISTRY_PASSWORD:
        description: "Optional, sets the password that will be used to login to the registry.  Default: secrets.GITHUB_TOKEN"
        required: false
      SLACK_WEBHOOK:
        description: "Optional, enables Slack notifications."
        required: false

jobs:

  multiarch_image:

    runs-on: ubuntu-latest

    steps:
      - name: Multiarch Image Management -- Checkout Repository
        uses: actions/checkout@v4

      - name: Multiarch Image Management --Setup Environment
        env:
          WORKFLOW_NAME: ${{ inputs.WORKFLOW_NAME }}
        run: |
          bash "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Multiarch Image Management -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Multiarch Image Management -- Configure Registry
        id: registry
        run: |
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_DEFAULT_SETTER }}" \
            -o "IMAGE_NAME" \
            -d "${PROJECT_OWNER}/${PROJECT_NAME}" \
            -s "${{ inputs.IMAGE_NAME }}"
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_DEFAULT_SETTER }}" \
            -o "REGISTRY_USERNAME" \
            -d "${{ github.actor }}" \
            -s "${{ secrets.REGISTRY_USERNAME }}"
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_DEFAULT_SETTER }}" \
            -o "REGISTRY_PASSWORD" \
            -d "${{ secrets.GITHUB_TOKEN }}" \
            -s "${{ secrets.REGISTRY_PASSWORD }}"
        shell: bash

      - name: Multiarch Image Management -- Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.REGISTRY }}
          username: ${{ steps.registry.outputs.REGISTRY_USERNAME }}
          password: ${{ steps.registry.outputs.REGISTRY_PASSWORD }}

      - name: Multiarch Image Management -- Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Multiarch Image Management -- Build Tag to Platform Mappings
        id: tags
        run: |
          PREFIX="${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}"
          IFS=$'\n' read -r -d '' -a TAGS <<< "${{ inputs.SOURCE_TAGS }}" || true
          SOURCE_IMAGES=""
          for TAG in "${TAGS[@]}"; do
            SOURCE_IMAGE="${PREFIX}:$(echo "${TAG}" | tr -d '[:blank:]')"
            SOURCE_IMAGES="${SOURCE_IMAGES} ${SOURCE_IMAGE}"
          done
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_SET_VALUE }}" \
            echo "${SOURCE_IMAGES}"
        shell: bash

      - name: Multiarch Image Management -- Create Multiarch Image
        run: |
          docker buildx imagetools create -t \
            ${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}:${{ inputs.MULTIARCH_TAG }} \
            ${{ steps.tags.outputs.value }}
        shell: bash

      - name: Multiarch Image Management -- Append Latest Tag
        if: inputs.IMAGE_LATEST == true
        run: |
          docker buildx imagetools create -t \
            ${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}:latest \
            ${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}:${{ inputs.MULTIARCH_TAG }}

      - name: Multiarch Image Management -- Append Git Tag
        if: inputs.IMAGE_GIT == true
        run: |
          docker buildx imagetools create -t \
            ${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}:${{ env.BRANCH_OR_TAG }} \
            ${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}:${{ inputs.MULTIARCH_TAG }}

      - name: Multiarch Image Management -- Report Job Status on Success
        if: inputs.VERBOSE_NOTIFICATIONS == true
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_MESSAGE: |
            Multiarch image has been created!
            Pushed Image: ${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}:${{ inputs.MULTIARCH_TAG }}
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Multiarch Image Management -- Report Job Status on Failure
        if: failure() || inputs.TESTING_MODE == true
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":x:"
          NOTIFICATION_MESSAGE: "Multiarch image creation has failed!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          TESTING_MODE: ${{ inputs.TESTING_MODE }}
