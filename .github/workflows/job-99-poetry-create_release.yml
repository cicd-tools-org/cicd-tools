---
name: job-99-poetry-create_release

on:
  workflow_call:
    inputs:
      APPENDED_CONTENT:
        default: ""
        description: "Optional, allows you to specify markdown content to append to the changelog in a generated release."
        required: false
        type: string
      REMOTE_SCRIPT_GENERATE_CHANGELOG:
        default: "ci/github/scripts/job-99-generate-changelog.sh"
        description: "Optional, allows you to specify a changelog generation script."
        required: false
        type: string
      REMOTE_SCRIPT_GENERATE_RELEASE:
        default: "ci/github/scripts/job-99-generate-release.js"
        description: "Optional, allows you to specify a script to generate the actual GitHub release."
        required: false
        type: string
      REMOTE_SCRIPT_IDENTIFY_CANDIDATE:
        default: "ci/github/scripts/job-99-release-candidate.sh"
        description: "Optional, allows you to specify a filter script for release candidates."
        required: false
        type: string
      REMOTE_SCRIPT_USE_POETRY:
        default: "ci/generic/scripts/use-poetry.sh"
        description: "Optional, allows you to specify a use poetry script."
        required: false
        type: string
      TESTING_MODE:
        default: false
        description: "Optional, allows you to test a workflow failure."
        required: false
        type: boolean
      WORKFLOW_NAME:
        default: ""
        description: "Identifies this workflow in notifications."
        required: false
        type: string
    secrets:
      SLACK_WEBHOOK:
        description: "Optional, enables Slack notifications."
        required: false

jobs:

  generate_github_release:

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        uses: actions/checkout@v3

      - name: Create Release -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Create Release -- Execute Remote Filter Release Candidates Script
        id: filter
        run: |
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_IDENTIFY_CANDIDATE }}" \
            "${{ github.event.ref }}"
        shell: bash

      - name: Create Release -- Stash Toolbox
        if: steps.filter.outputs.RELEASE_CANDIDATE == 'true'
        run: |
          cp -rv .cicd-tools/boxes/ ..
        shell: bash

      - name: Create Release -- Checkout Repository (All Commits)
        if: steps.filter.outputs.RELEASE_CANDIDATE == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Release -- Retrieve Stashed Toolbox
        if: steps.filter.outputs.RELEASE_CANDIDATE == 'true'
        run: |
          cp -rv ../boxes .cicd-tools/
        shell: bash

      - name: Create Release -- Setup Environment
        if: steps.filter.outputs.RELEASE_CANDIDATE == 'true'
        env:
          WORKFLOW_NAME: ${{ inputs.WORKFLOW_NAME }}
        run: |
          "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Create Release -- Execute Remote Install Poetry Script
        if: steps.filter.outputs.RELEASE_CANDIDATE == 'true'
        run: |
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_USE_POETRY }}" \
            "install-poetry"
        shell: bash

      - name: Create Release -- Execute Remote Check Version Script
        if: steps.filter.outputs.RELEASE_CANDIDATE == 'true'
        run: |
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_USE_POETRY }}" \
            "check-version" "${BRANCH_OR_TAG}"
        shell: bash

      - name: Create Release -- Execute Remote Generate Changelog Script
        if: steps.filter.outputs.RELEASE_CANDIDATE == 'true'
        run: |
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_GENERATE_CHANGELOG }}" \
            "${BRANCH_OR_TAG}"
        shell: bash

      - name: Create Release -- Generate GitHub Release Draft
        id: create_release
        env:
          APPENDED_CONTENT: ${{ inputs.APPENDED_CONTENT }}
        if: steps.filter.outputs.RELEASE_CANDIDATE == 'true' && inputs.TESTING_MODE == false
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_GENERATE_RELEASE }}');
            const body = process.env.CHANGE_LOG_CONTENT + "\n" + process.env.APPENDED_CONTENT;
            const tag = process.env.BRANCH_OR_TAG;
            await script({ body, context, core, github, tag })

      - name: Create Release -- Report Job Status on Success
        if: steps.filter.outputs.RELEASE_CANDIDATE == 'true'
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_MESSAGE: |
            automated release has been created!
            https://github.com/${{ env.PROJECT_OWNER }}/${{ env.PROJECT_NAME }}/releases
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Report Job Status on Failure
        if: failure() || (steps.filter.outputs.RELEASE_CANDIDATE == 'true' && inputs.TESTING_MODE == true)
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":x:"
          NOTIFICATION_MESSAGE: "automated release creation has failed!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
