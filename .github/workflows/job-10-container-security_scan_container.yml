---
name: job-10-container-security_scan_container

# Consuming Projects Must Implement:
# - ./.github/scripts/step-setup-environment.sh

on:
  workflow_call:
    inputs:
      BUILD_ARGS:
        default: ""
        description: "Optional, allows you define build arguments for the container build."
        required: false
        type: string
      CONTEXT:
        default: "."
        description: "Optional, allows you define where the build context is located."
        required: false
        type: string
      DOCKERFILE:
        default: "./Dockerfile"
        description: "Optional, allows you define where the Dockerfile is located with respect to the context."
        required: false
        type: string
      FAIL_BUILD:
        default: false
        description: "Optional, allows you to fail the build if security vulnerabilities are detected above the threshold."
        required: false
        type: boolean
      FAIL_THRESHOLD:
        default: "critical"
        description: "Optional, specifies the vulnerability level that can trigger a failed build. (Valid values are: 'critical', 'high', 'medium', 'low' or 'negligible')"
        required: false
        type: string
      FIXED_ONLY:
        default: false
        description: "Optional, allows you to filter the report by vulnerabilities that have been patched and have a fixed version made available."
        required: false
        type: boolean
      IMAGE_NAME:
        default: ""
        description: "Optional, allows you to specify the image name, otherwise the configured script will generate one."
        required: false
        type: string
      IMAGE_TAG:
        default: ""
        description: "Optional, allows you specify the image tag, otherwise the pushed branch or tag will be used."
        required: false
        type: string
      PLATFORM:
        default: ""
        description: "Optional, allows you to specify the target platform of the container."
        required: false
        type: string
      POST_BUILD_COMMAND:
        default: ""
        description: "Optional, a command to run after the build executes."
        required: false
        type: string
      PRE_BUILD_COMMAND:
        default: ""
        description: "Optional, a command to run before build executes."
        required: false
        type: string
      REGISTRY:
        default: "ghcr.io"
        description: "Optional, allows you to specify a Docker registry to use."
        required: false
        type: string
      REMOTE_SCRIPT_DEFAULT_SETTER:
        default: "ci/github/scripts/step-set-value-with-default.sh"
        description: "Optional, allows you to specify different default value creation script."
        required: false
        type: string
      REMOTE_SCRIPT_SET_VALUE:
        default: "ci/github/scripts/step-set-value.sh"
        description: "Optional, allows you to specify a workflow set value script."
        required: false
        type: string
      REQUIRES_QEMU:
        default: false
        description: "Optional, allows you to use docker support for QEMU as part of your build."
        required: false
        type: boolean
      TESTING_MODE:
        default: false
        description: "Optional, allows you to test a workflow failure."
        required: false
        type: boolean
      VERBOSE_NOTIFICATIONS:
        default: false
        description: "Optional, allows you to adjust the notification verbosity."
        required: false
        type: boolean
      WORKFLOW_NAME:
        default: ""
        description: "Identifies this workflow in notifications."
        required: false
        type: string
    secrets:
      SLACK_WEBHOOK:
        description: "Optional, enables Slack notifications."
        required: false

jobs:

  run_anchore:

    runs-on: ubuntu-latest

    steps:
      - name: Container Scan -- Checkout Repository
        uses: actions/checkout@v4

      - name: Container Scan -- Setup Environment
        env:
          WORKFLOW_NAME: ${{ inputs.WORKFLOW_NAME }}
        run: |
          bash "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Container Scan -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Container Scan -- Configure Registry
        id: registry
        run: |
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_DEFAULT_SETTER }}" \
            -o "IMAGE_NAME" \
            -d "${PROJECT_OWNER}/${PROJECT_NAME}" \
            -s "${{ inputs.IMAGE_NAME }}"
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_DEFAULT_SETTER }}" \
            -o "IMAGE_TAG" \
            -d "${{ env.BRANCH_OR_TAG }}" \
            -s "${{ inputs.IMAGE_TAG }}"
        shell: bash

      - name: Container Scan -- Set up QEMU
        if: inputs.REQUIRES_QEMU == true
        uses: docker/setup-qemu-action@v3

      - name: https://github.com/docker/buildx/issues/314
        if: inputs.REQUIRES_QEMU == true
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes -c yes
        shell: bash

      - name: Container Scan -- Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Container Scan -- Build Container
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ inputs.PLATFORM }}
          build-args: |
            ${{ inputs.BUILD_ARGS }}
          cache-from: type=gha,scope=${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}:${{ steps.registry.outputs.IMAGE_TAG }}
          cache-to: type=gha,scope=${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}:${{ steps.registry.outputs.IMAGE_TAG }}
          context: ${{ inputs.CONTEXT }}
          file: ${{ inputs.CONTEXT }}/${{ inputs.DOCKERFILE }}
          load: true
          tags: |
            localbuild/test:${{ env.BRANCH_OR_TAG }}
            ${{ inputs.REGISTRY }}/${{ steps.registry.outputs.IMAGE_NAME }}:${{ env.BRANCH_OR_TAG }}

      - name: Container Scan -- Run Anchore Scan
        id: scan
        uses: anchore/scan-action@v3
        with:
          fail-build: ${{ inputs.FAIL_BUILD }}
          image: localbuild/test:${{ env.BRANCH_OR_TAG }}
          only-fixed: ${{ inputs.FIXED_ONLY }}
          severity-cutoff: ${{ inputs.FAIL_THRESHOLD }}

      - name: Container Scan -- Upload SARIF Report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          wait-for-processing: false

      - name: Container Scan -- Report Job Status on Success
        if: inputs.VERBOSE_NOTIFICATIONS == true
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_MESSAGE: "Container Security Scan has passed!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Container Scan -- Report Job Status on Failure
        if: failure() || inputs.TESTING_MODE == true
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":x:"
          NOTIFICATION_MESSAGE: "Container Security Scan has failed!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          TESTING_MODE: ${{ inputs.TESTING_MODE }}
