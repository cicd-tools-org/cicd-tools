---
name: job-40-poetry-ansible_role_lint

# Consuming Projects Must Implement:
# - ./.github/scripts/step-setup-environment.sh

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        description: "The maximum allowable parallel executions."
        required: true
        type: number
      EXTRA_ARGS:
        default: ""
        description: "Optional, allows you to specify additional arguments to ansible-lint"
        required: false
        type: string
      PYTHON_VERSIONS:
        description: "A string encoded JSON array of valid python versions."
        required: true
        type: string
      ROLE_PATH:
        default: "."
        description: "Optional, allows you to specify a relative path, within the repository, to the role that is being analyzed."
        required: false
        type: string
      TESTING_MODE:
        default: false
        description: "Optional, allows you to test a workflow failure."
        required: false
        type: boolean
      VERBOSE_NOTIFICATIONS:
        default: false
        description: "Optional, allows you to adjust the notification verbosity."
        required: false
        type: boolean
      WORKFLOW_NAME:
        default: ""
        description: "Identifies this workflow in notifications."
        required: false
        type: string
    secrets:
      SLACK_WEBHOOK:
        description: "Optional, enables Slack notifications."
        required: false

jobs:

  run_ansible_lint:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ${{ fromJSON(inputs.PYTHON_VERSIONS) }}
      max-parallel: ${{ inputs.CONCURRENCY }}

    steps:
      - name: Ansible Lint -- Checkout Repository
        uses: actions/checkout@v3

      - name: Ansible Lint -- Setup Environment
        env:
          WORKFLOW_NAME: ${{ inputs.WORKFLOW_NAME }}
        run: |
          bash "./.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: Ansible Lint -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Ansible Lint -- Install Toolbox
        uses: ./.github/actions/action-00-toolbox

      - name: Ansible Lint -- Calculate Platform Independent Home Folder
        id: platform_homefolder
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-05-generic-platform_homefolder

      - name: Ansible Lint -- Calculate Cache Key
        id: hash
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-05-generic-conditional_file_hash
        with:
          FILE_NAME: "requirements.yml"

      - name: Ansible Lint -- Initialize Cache Locations
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-20-generic-cache
        with:
          CACHE_FOLDERS: |
            ${{ steps.platform_homefolder.outputs.HOME }}/.cache/ansible-compat
          CACHE_KEY: ansible-compat-${{ steps.hash.outputs.HASH }}-${{ env.CACHE_TTL }}
          CACHE_NAME: "ansible_compat_cache"

      - name: Ansible Lint -- Install Project Dependencies
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-05-poetry-dependencies

      - name: Ansible Lint -- Run 'ansible-lint' via Poetry
        run: |
          poetry run ansible-lint ${{ inputs.EXTRA_ARGS }}
        shell: bash
        working-directory: ${{ inputs.ROLE_PATH }}

      - name: Ansible Lint -- Report Job Status on Success
        if: inputs.VERBOSE_NOTIFICATIONS == true
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_MESSAGE: "Ansible-Lint test has passed!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Ansible Lint -- Report Job Status on Failure
        if: failure() || inputs.TESTING_MODE == true
        uses: ./.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":x:"
          NOTIFICATION_MESSAGE: "Ansible-Lint test has failed!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          TESTING_MODE: ${{ inputs.TESTING_MODE }}
