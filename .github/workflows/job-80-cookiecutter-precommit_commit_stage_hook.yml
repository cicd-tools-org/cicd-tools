---
name: job-80-cookiecutter-precommit_commit_stage_hook

# Consuming Projects Must Implement:
# - ./.github/scripts/step-render-template.sh
# - ./.github/scripts/step-requirements-template.sh
# - ./.github/scripts/step-setup-environment.sh

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        description: "The maximum allowable parallel executions."
        required: true
        type: number
      PRECOMMIT_HOOK_ID:
        description: "The 'hook id' of the precommit linter you wish to run."
        required: true
        type: string
      PRECOMMIT_HOOK_NAME:
        description: "The plaintext name of the precommit linter you wish to run."
        required: true
        type: string
      PYTHON_VERSIONS:
        description: "A string encoded JSON array of valid python versions."
        required: true
        type: string
      REMOTE_SCRIPT_USE_POETRY:
        default: "ci/generic/scripts/use-poetry.sh"
        description: "Optional, allows you to specify a use poetry script."
        required: false
        type: string
      TESTING_MODE:
        default: false
        description: "Optional, allows you to test a workflow failure."
        required: false
        type: boolean
      TEMPLATE_SCENARIOS:
        default: '["default"]'
        description: "Optional, a string encoded JSON array of 'cookiecutter.json' scenario files that will be used during rendering."
        required: false
        type: string
      VERBOSE_NOTIFICATIONS:
        default: false
        description: "Optional, allows you to adjust the notification verbosity."
        required: false
        type: boolean
      WORKFLOW_NAME:
        default: ""
        description: "Identifies this workflow in notifications."
        required: false
        type: string
    secrets:
      SLACK_WEBHOOK:
        description: "Optional, enables Slack notifications."
        required: false

env:
  TEMPLATE_SKIP_POETRY: 0
  TEMPLATE_SKIP_PRECOMMIT: 0

jobs:

  run_precommit_hook:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ${{ fromJSON(inputs.PYTHON_VERSIONS) }}
        scenario: ${{ fromJSON(inputs.TEMPLATE_SCENARIOS) }}
      max-parallel: ${{ inputs.CONCURRENCY }}

    steps:
      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- Checkout Repository
        uses: actions/checkout@v4
        with:
          path: 'template'

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- Setup Environment
        env:
          WORKFLOW_NAME: ${{ inputs.WORKFLOW_NAME }}
        run: |
          bash "./template/.github/scripts/step-setup-environment.sh"
        shell: bash

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- Install Toolbox
        uses: ./template/.github/actions/action-00-toolbox
        with:
          PROJECT_ROOT_PATH: "template"

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- (COOKIECUTTER) Render Template
        uses: ./template/.cicd-tools/boxes/active/ci/github/actions/action-05-cookiecutter-render
        with:
          PROJECT_ROOT_PATH: "template"
          SCENARIO: ${{ matrix.scenario }}

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- (COOKIECUTTER) Mount Pre-Commit Cache
        uses: actions/cache@v4
        with:
          key: pre-commit-${{ hashFiles('./template/.pre-commit-config.yaml') }}-${{ hashFiles('./template/{{cookiecutter.project_slug}}/.pre-commit-config.yaml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pre-commit

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- (Template) Install pre-commit
        run: |
          bash "./.cicd-tools/boxes/active/${{ inputs.REMOTE_SCRIPT_USE_POETRY }}" \
            "install-compatible"
        shell: bash
        working-directory: template

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- (Template) Run '${{ inputs.PRECOMMIT_HOOK_ID }}' pre-commit hook
        run: |
          poetry run pre-commit run ${{ inputs.PRECOMMIT_HOOK_ID }} --all-files
        shell: bash
        working-directory: template

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- (Rendered Template) Run '${{ inputs.PRECOMMIT_HOOK_ID }}' pre-commit hook
        run: |
          poetry run pre-commit run ${{ inputs.PRECOMMIT_HOOK_ID }} --all-files
        shell: bash
        working-directory: ${{ env.TEST_PROJECT_NAME }}

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- Report Job Status on Success
        if: inputs.VERBOSE_NOTIFICATIONS == true
        uses: ./template/.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_MESSAGE: "${{ inputs.PRECOMMIT_HOOK_NAME }} (${{ matrix.scenario }}) checks have succeeded!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PROJECT_ROOT_PATH: "template"

      - name: ${{ inputs.PRECOMMIT_HOOK_NAME }} -- Report Job Status on Failure
        if: failure() || inputs.TESTING_MODE == true
        uses: ./template/.cicd-tools/boxes/active/ci/github/actions/action-00-generic-notification
        with:
          NOTIFICATION_EMOJI: ":x:"
          NOTIFICATION_MESSAGE: "${{ inputs.PRECOMMIT_HOOK_NAME }} (${{ matrix.scenario }}) checks have failed!"
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PROJECT_ROOT_PATH: "template"
          TESTING_MODE: ${{ inputs.TESTING_MODE }}
