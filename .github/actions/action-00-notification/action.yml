---
name: action-00-notification
description: "Sends notifications via the selected notification script."
author: niall@niallbyrne.ca

inputs:
  NOTIFICATION_EMOJI:
    default: ":heavy_check_mark:"
    description: "Optional, allows you to specify a notification emoji for your notification platform."
    required: false
  NOTIFICATION_EMOJI_FAILURE:
    default: ":x:"
    description: "Optional, allows you to specify a notification emoji for your notification platform."
    required: false
  NOTIFICATION_MESSAGE:
    description: "The message that will sent as a notification, in the event the job succeeds."
    required: true
  NOTIFICATION_MESSAGE_FAILURE:
    default: "there was an error reporting the workflow's status!"
    description: "The message that will sent as a notification, in the event the job fails."
    required: false
  NOTIFICATION_WEBHOOK_URL:
    description: "The webhook url to that will be posted to, in order to generate notifications."
    required: true
  REMOTE_SCRIPT_PREFIX:
    default: "https://raw.githubusercontent.com/niall-byrne/cicd-tools/master/"
    description: "Optional, allows you to specify a base path prefix for all remote scripts."
    required: false
  REMOTE_SCRIPT_NOTIFICATION:
    default: "scripts/notifications/slack.sh"
    description: "Optional, allows you to specify a notification script."
    required: false
  TESTING_MODE:
    default: false
    description: "Optional, allows you to test a workflow failure."
    required: false
    type: boolean

runs:
  using: "composite"
  steps:
    - name: Notification -- Report Job Status on Success
      env:
        NOTIFICATION_WEBHOOK_URL: ${{ inputs.NOTIFICATION_WEBHOOK_URL }}
      run: |
        # shellcheck source=/dev/null
        source <(curl --retry 3 --retry-max-time 30 "${{ inputs.REMOTE_SCRIPT_PREFIX }}${{ inputs.REMOTE_SCRIPT_NOTIFICATION }}") "${NOTIFICATION}" "${{ inputs.NOTIFICATION_EMOJI }} ${{ inputs.NOTIFICATION_MESSAGE }}"
      shell: bash

    - name: Notification -- Report Job Status on Failure
      if: failure() || inputs.TESTING_MODE == true
      run: |
        # shellcheck source=/dev/null
        source <(curl --retry 3 --retry-max-time 30 "${{ inputs.REMOTE_SCRIPT_PREFIX }}${{ inputs.REMOTE_SCRIPT_NOTIFICATION }}") "${NOTIFICATION}" "${{ inputs.NOTIFICATION_EMOJI_FAILURE }} ${{ inputs.NOTIFICATION_MESSAGE_FAILURE }}"
        echo "ERROR: ${{ inputs.NOTIFICATION_MESSAGE_FAILURE }}" >> /dev/stderr
      shell: bash
